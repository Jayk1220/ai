ch 07 객체지향 프로그래밍
	
	1. 객체와 클래스
	    - Class : 속성(변수)와 메소드(함수)를 갖는 객체를 만들기 위한 설계도
		   모든 class는 Objnect 상속받음
		class 클래스명 (상속받을 클래스명):
		      클래스변수
		      __static 변수
		      def __ init 

	2. 생성자와 소멸자
	    (1) 생성자 (__init__) : 생성자(생성자 없으면 디폴트 생성자 자동 생성)
		__init__ (self, 매개변수1, 매개변수2 ....) --> 객체가 생성될 때 자동으로 실행됨
			self.인스턴스변수 = 매개변수
		생성 시 필요한 코드 (인스턴스변수 생성, 초기화)포함
	    (2) 소멸자 (__del__) : 객체 소멸 시 자동 실행
		def __del__(self):
		객체 소멸 시 필요한 코드 포함
		인스턴스(객체) 레퍼런스 카운트 0 될 때 실행

	오버라이딩(함수의 재정의)
	오버로딩(함수의 중복정의) 파이썬은 불가.

	3. 변수 & 함수 (메소드)
	    (1) 인스턴스변수(self)	  : 첫번째 인자에 self를 명시. 객체를 통해서만 호출 가능
	    (2) 클래스 변수(cls)	  : 메소드 위에 @classmethod 를 명시. 첫번째 인자에 clz(cls) 를 명시
	    (3) Static(aka 정적) 변수 ()  : 메소드 위에 @staticmethod 명시 디폴트 인자가 없음
				   static 변수 (정적변수): 여러 객체들 사이에 데이터를 공유하고 싶을 때 사용
       				   static 변수 : 앞에 __(언더스코어 두 개)를 붙임. 클래스명._(1개)클래스명__(2개)static변수명으로 참조 static 변수는 클래스 내부에서만 접근하도록 하려는 용도

	    (1) 인스턴스메소드 :
		def 인스턴스메소드 명(self, [매개변수, ...]):

	    (2) 클래스메소드
		@classmethod
		def 클래스메소드명 (cls, [매개변수 ...]):
			cls. 클래스변수 관련 로직 (클래스명.클래스메소드명() 호출)

	    (3) Static 메소드
		@staticmethod
		def static 메소드명 ([매개변수]):
			클래스변수나 인스턴스변수나 static변수가 없는 로직

		p=Person('홍길동', '남자')
		
		- 객체 (인스턴스변수). __dict__ => 객체를 딕셔너리형태로 보여줌
			e.g. p.__dict__ ==> ('name' : '홍길동','gender':'남자')

	4. 상속과 재정의		  
	    (1) 클래스 재사용
	    (2) 상속을 통해 부모 클래스의 모든 속성을 자식 클래스로 물려주기 가능
		class 자식클래스명 (부모클래스명):
		super(): '부모클래스; 의 의미